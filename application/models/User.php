<?php

/*
 * Copyright (C) 2009-2011 Internet Neutral Exchange Association Limited.
 * All Rights Reserved.
 * 
 * This file is part of IXP Manager.
 * 
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 * 
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 * 
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 * 
 * http://www.gnu.org/licenses/gpl-2.0.html
 */


/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
/**
 *
 * Auto-generated Doctrine ORM File
 *
 * @category ORM
 * @package IXP_ORM_Models
 * @copyright Copyright 2008 - 2010 Internet Neutral Exchange Association Limited <info (at) inex.ie>
 * @author Barry O'Donovan <barryo (at) inex.ie>
 */
class User extends BaseUser
{

    const AUTH_PUBLIC    = 0;
    const AUTH_CUSTUSER  = 1;
    const AUTH_CUSTADMIN = 2;
    const AUTH_SUPERUSER = 3;

    public static $PRIVILEGES = array(
        User::AUTH_CUSTUSER  => 'CUSTUSER',
        User::AUTH_CUSTADMIN => 'CUSTADMIN',
        User::AUTH_SUPERUSER => 'SUPERUSER'
    );

    public static $PRIVILEGES_TEXT = array(
        User::AUTH_CUSTUSER  => 'Customer User',
        User::AUTH_CUSTADMIN => 'Customer Superuser',
        User::AUTH_SUPERUSER => 'Superuser'
    );


    public function setUp()
    {
        parent::setUp();

        $this->hasOne( 'Cust',  array( 'local' => 'custid',  'foreign' => 'id') );

        $this->hasOne( 'User as Parent', array( 'local' => 'parent_id', 'foreign' => 'id' ) );
    }

    /**
     * Set (or update) a user preference
     *
     * @param $attribute string The preference name
     * @param $value string The value to assign to the preference
     * @param $op string The operand (e.g. = (default), <, <=, :=, etc)
     * @return mixed The preference value as supplied
     */
    public function setPreference( $attribute, $value, $op = '=' )
    {
        if( $pref = $this->loadPreference( $attribute ) )
        {
            $pref['value'] = $value;
            $pref->save();
            return $value;
        }

        $dr = new UserPref();
        $dr['user_id']   = $this['id'];
        $dr['attribute'] = $attribute;
        $dr['op']        = $op;
        $dr['value']     = $value;
        $dr->save();

        return $value;
    }

    /**
     * Delete a user preference
     *
     * @param $attribute string The preference name
     * @return void 
     */
    public function deletePreference( $attribute )
    {
        if( $pref = $this->loadPreference( $attribute ) )
            $pref->delete();
    }
    
    /**
     * Get the named preference
     *
     * WARNING: Evaluate the return of this function using !== or === as a preference such as '0'
     * will evaluate as false otherwise.
     *
     * @param $attribute string The named attribute / preference to check for
     * @return bool|string If the named preference is not defined, returns FALSE; otherwise it returns the preference
     */
    public function getPreference( $attribute )
    {
        $r = Doctrine_Query::create()
            ->select( 'up.value' )
            ->from( 'UserPref up' )
            ->where( 'up.user_id = ?', $this['id'] )
            ->andWhere( 'up.attribute = ?', $attribute )
            ->execute( null, Doctrine_Core::HYDRATE_SINGLE_SCALAR );

        if( $r === array() )
            return false;

        return $r;
    }

    /**
     * Load the ORM object of the named preference
     *
     * @param $attribute string The named attribute / preference to check for
     * @return bool|Doctrine_Record If the named preference is not defined, returns FALSE; otherwise it returns the Doctrine_Record
     */
    public function loadPreference( $attribute )
    {
        return Doctrine_Query::create()
            ->from( 'UserPref up' )
            ->where( 'up.user_id = ?', $this['id'] )
            ->andWhere( 'up.attribute = ?', $attribute )
            ->fetchOne( null, Doctrine_Core::HYDRATE_RECORD );
    }

    /**
     * See getPreference()
     *
     * @see getPreference()
     */
    public function hasPreference( $attribute )
    {
        return $this->getPreference( $attribute );
    }

    /**
     * Get a preference if it exists or set it and return if not
     *
     * A useful function to replace clauses such as:
     *
     * $pref = $user->getPreference( 'qwerty' );
     * if( $pref === false )
     * {
     *     $pref = 'default';
     *     $user->setPreference( 'qwerty', 'default' );
     * }
     *
     * with:
     *
     * $pref = $user->getOrSetGetPreference( 'qwerty', 'default' );
     *
     * @param string $attribute The preference to get or get/set
     * @param mixed $default The default value to set the preference to and return if not aleady set
     * @param string $op The operand for the preference. Defaults to '='
     * @return mixed $default as passed to the function
     * @see getPreference()
     * @see setPreference()
     */
    public function getOrSetGetPreference( $attribute, $default, $op = '=' )
    {
        // is the preference already set?
        $pref = $this->getPreference( $attribute );

        if( $pref !== false )
            return $pref;

        return $this->setPreference( $attribute, $default, $op );
    }

}